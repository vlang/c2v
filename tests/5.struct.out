@[translated]
module main

@[export: 'PI']
const PI = 314

struct User {
	name &i8
	age  int
}

// lots of structs are typedef'ed in C
struct TUser {
	name             &i8
	age              int
	capitalizedField f32
	// fields in V must be lower case
}

// struct names have to be capitalized in V
struct Small {
	foo int
}

struct Small3 {
	foo int
}

struct Small2 {
	struct_field Small
	// make sure field types are capitalized
	struct_field_ptr  &Small
	struct_field_ptr2 &&Small3
}

fn small_fn(param Small) {
	// make sure arg types are capitalized
}

type Angle_t = u32

enum Color {
	red
	green
	blue
}

fn handle_user(user User) {
}

fn handle_tuser(user TUser) {
}

fn multi_assign() {
	aa := 0
	bb := 10
	cc := 20
	aa = cc
	bb = aa
}

fn x(pi int) {
}

@[export: 'weapon_keys']
const weapon_keys = [0, 0, 0]!

fn sizeof_array() {
	x := 10
	c := sizeof(x)
	n := (sizeof(weapon_keys) / sizeof(*weapon_keys))
}

@[export: 'checkcoord']
const checkcoord = [[3, 0, 2, 1]!, [3, 0, 2, 0]!, [3, 1, 2, 0]!,
	[0, 0, 0, 0]!, [2, 0, 2, 1]!, [0, 0, 0, 0]!, [3, 1, 3, 0]!,
	[0, 0, 0, 0]!, [2, 0, 3, 1]!, [2, 1, 3, 1]!, [2, 1, 3, 0]!]!

@[c2v_variadic]
fn i_error(s ...&i8) {
	C.puts(s)
}

fn sixtyfour() i64 {
	return 64
}

union MyUnion {
	a int
	b i8
}

struct AnonStructTest {
	age int
	foo struct {
		bar int
		baz &i8
	}

	last_field f32
}

struct AnonStruct_105 {
	fff int
	sss &i8
}

@[weak]
__global global_state_using_anon_struct AnonStruct_105

fn main() {
	user := User{}
	user.age = 20
	user.name = c'Bob'
	C.printf(c'age=%d', user.age)
	handle_user(user)
	sf := sixtyfour()
	C.printf(c'sixtyfour=%lld', sf)
	// TODO
	// struct User user2 = { .age = 30, .name = "Peter" };
	user2 := TUser{}
	user2.age = 30
	user2.name = c'Peter'
	handle_tuser(user2)
	//
	s := Small{}
	// make sure struct inits are capitalized
	s2 := Small{
		foo: 10
	}

	x(PI)
	// make sure cap consts stay capitalized
	return
}
